# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QoposoK9xRY0_B3vu-8S4n5G4sd86rdL
"""

#create array

import array
arr=array.array("i",[1,2,3,4,5])
for i in range(0,5):
  print(arr[i], end=" ")
print("\r")
#append array

arr.append(6)
for i in range(0,6):
  print(arr[i], end=" ")
print("\r")
#insert array

arr.insert(1,10)
for i in range(0,6):
  print(arr[i], end=" ")
print("\r")
#pop array

arr.pop(2)
for i in range(0,5):
  print(arr[i], end=" ")
print("\r")

#remove array

arr.remove(10)#we must insert element not index
for i in range(0,5):
  print(arr[i], end=" ")
print("\r")
print(arr.index(3))#insert value

arr.reverse()
for i in range(0,5):
  print(arr[i], end=" ")
print("\r")

#Program for array rotation
# Algorithm:
# Step 1- Define a function to rotate the array
# Step 2- Declare a temporary variable
# Step 3- Use len() to calculate the length of the array and store it in a variable
# Step 4- Run a loop from d to n and store the elements at each index in the temp array
# Step 5- Run another loop to add the rest of the elements to the temporary array
# Step 6- Copy temp array to original array
# Step 7- Return array

def leftrotate(self,d):
  for i in range(d):
    #lefrby(arr,len(arro))
#def lefrby(arr,n):
    temp=arr[0]
    for i in range(len(arr)-1):
      arr[i]=arr[i+1]
    arr[len(arr)-1]=temp
def printarr(self,n):
  for i in range(n):
   print(arr[i],end=" ")
   #print ("% d"% arr[i], end =" ")
  
arr=[1,2,3,4,5,6,7]
leftrotate(arr,2)
printarr(arr,7)

#Program to cyclically rotate an array by one
# Following are steps. 
# 1) Store last element in a variable say x. 
# 2) Shift all elements one position ahead. 
# 3) Replace first element of array with x.

def cycleRoutation(self,n):
  temp=arr[n-1]
  for i in range(n-1,0,-1):
    arr[i]=arr[i-1]
  arr[0]=temp

def toPrint(self,n):
    for i in range(n):
      print(arr[i],end=" ")
    
  
arr=[1,2,3,4,5,6,7]
cycleRoutation(arr,7)
toPrint(arr,7)

#Binary serch

# 1) Find middle point mid = (l + h)/2
# 2) If key is present at middle point, return mid.
# 3) Else If arr[l..mid] is sorted
#     a) If key to be searched lies in range from arr[l]
#        to arr[mid], recur for arr[l..mid].
#     b) Else recur for arr[mid+1..h]
# 4) Else (arr[mid+1..h] must be sorted)
#     a) If key to be searched lies in range from arr[mid+1]
#        to arr[h], recur for arr[mid+1..h].
#     b) Else recur for arr[l..mid]

def BinarySerch(arr,findingValue,low,high):
  mid=(low+high)//2
  if arr[mid]==findingValue:
    return mid
  elif arr[mid]>findingValue:
    return BinarySerch(arr,findingValue,low,mid-1) 
  else: #arr[mid]<findingValue
    return BinarySerch(arr,findingValue,mid+1,high)
  return -1

arr=[1,2,3,4,5,6,7,8]
check=BinarySerch(arr,5,0,len(arr))
if check!=-1:
  print("Find this value in index no :"+str(check))
else:
  print("Not found")

#Bubble sort
def BubbleSort(array,):

  for j in range(len(array)):
    for i in range(0,len(array)-j-1):
      if array[i]>array[i+1]:
       temp=array[i]
       array[i]=array[i+1]
       array[i+1]=temp
array=[1,3,6,2,4,8]
BubbleSort(array)
for i in range(len(array)):
  print(array[i])

#Linear Array

def LinearSearch(arr,value):
  n=len(arra)
  for i in range(n-1):
    if arra[i]==value:
      print(arra[i])

arra=[1,2,3,4,5,6,7]
LinearSearch(arr,5)